{"ast":null,"code":"var _jsxFileName = \"/home/dell/Desktop/Theo/REACT JS/router-app/src/components/ApiApp.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport MoviesList from './MoviesList';\nimport './ApiApp.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ApiApp() {\n  _s();\n\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  async function fetchMoviesHandler() {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch('https://swapi.dev/api/films/');\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error('Something went unplanned!!!');\n      }\n\n      const transformedMovies = data.results.map(movieData => {\n        return {\n          id: movieData.episode_id,\n          title: movieData.title,\n          openingText: movieData.opening_crawl,\n          releaseDate: movieData.release_date\n        };\n      });\n      setMovies(transformedMovies);\n      setIsLoading(false);\n    } catch (error) {\n      setError(error.message);\n      setIsLoading(false);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: fetchMoviesHandler,\n        children: \"Fetch Movies\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: [!isLoading && movies.length > 0 && /*#__PURE__*/_jsxDEV(MoviesList, {\n        movies: movies\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 44\n      }, this), isLoading && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading...*.*.*\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 23\n      }, this), !isLoading && movies.length === 0 && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Found no Movies\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 44\n      }, this), !isLoading && error && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 31\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ApiApp, \"FIHQRktkC1feao3lZKyFWpoUq80=\");\n\n_c = ApiApp;\nexport default ApiApp;\n\nvar _c;\n\n$RefreshReg$(_c, \"ApiApp\");","map":{"version":3,"sources":["/home/dell/Desktop/Theo/REACT JS/router-app/src/components/ApiApp.js"],"names":["React","useState","MoviesList","ApiApp","movies","setMovies","isLoading","setIsLoading","error","setError","fetchMoviesHandler","response","fetch","data","json","ok","Error","transformedMovies","results","map","movieData","id","episode_id","title","openingText","opening_crawl","releaseDate","release_date","message","length"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAA+B,OAA/B;AAEA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAO,cAAP;;;AAEA,SAASC,MAAT,GAAkB;AAAA;;AAEhB,QAAM,CAACC,MAAD,EAAQC,SAAR,IAAqBJ,QAAQ,CAAC,EAAD,CAAnC;AACA,QAAM,CAACK,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,IAAD,CAAlC;;AAEA,iBAAeS,kBAAf,GAAoC;AAClCH,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAE,IAAAA,QAAQ,CAAC,IAAD,CAAR;;AAEA,QAAI;AACJ,YAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAAD,CAA5B;AACA,YAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;;AAEA,UAAG,CAACH,QAAQ,CAACI,EAAb,EAAiB;AACf,cAAM,IAAIC,KAAJ,CAAU,6BAAV,CAAN;AACD;;AAEC,YAAMC,iBAAiB,GAAGJ,IAAI,CAACK,OAAL,CAAaC,GAAb,CAAiBC,SAAS,IAAI;AACtD,eAAO;AACLC,UAAAA,EAAE,EAACD,SAAS,CAACE,UADR;AAELC,UAAAA,KAAK,EAAEH,SAAS,CAACG,KAFZ;AAGLC,UAAAA,WAAW,EAAEJ,SAAS,CAACK,aAHlB;AAILC,UAAAA,WAAW,EAACN,SAAS,CAACO;AAJjB,SAAP;AAMD,OAPyB,CAA1B;AAQDtB,MAAAA,SAAS,CAACY,iBAAD,CAAT;AACCV,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,KAlBC,CAkBA,OAAOC,KAAP,EAAc;AAClBC,MAAAA,QAAQ,CAACD,KAAK,CAACoB,OAAP,CAAR;AACArB,MAAAA,YAAY,CAAC,KAAD,CAAZ;AAEG;AACF;;AAEC,sBACE,QAAC,KAAD,CAAO,QAAP;AAAA,4BACE;AAAA,6BACE;AAAQ,QAAA,OAAO,EAAEG,kBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eAIE;AAAA,iBACE,CAACJ,SAAD,IAAeF,MAAM,CAACyB,MAAP,GAAe,CAA9B,iBAAmC,QAAC,UAAD;AAAY,QAAA,MAAM,EAAEzB;AAApB;AAAA;AAAA;AAAA;AAAA,cADrC,EAEEE,SAAS,iBAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFhB,EAGC,CAACA,SAAD,IAAcF,MAAM,CAACyB,MAAP,KAAiB,CAA/B,iBAAoC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHrC,EAIC,CAACvB,SAAD,IAAcE,KAAd,iBAAuB;AAAA,kBAAIA;AAAJ;AAAA;AAAA;AAAA;AAAA,cAJxB;AAAA;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAaD;;GAhDQL,M;;KAAAA,M;AAkDT,eAAeA,MAAf","sourcesContent":["import React , {useState} from 'react';\n\nimport MoviesList from './MoviesList';\nimport './ApiApp.css';\n\nfunction ApiApp() {\n\n  const [movies,setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  \n  async function fetchMoviesHandler() {\n    setIsLoading(true);    \n    setError(null);\n\n    try { \n    const response = await fetch('https://swapi.dev/api/films/')\n    const data = await response.json();\n\n    if(!response.ok) {\n      throw new Error('Something went unplanned!!!');\n    }\n    \n      const transformedMovies = data.results.map(movieData => {\n        return {\n          id:movieData.episode_id,\n          title: movieData.title,\n          openingText: movieData.opening_crawl,\n          releaseDate:movieData.release_date\n        }\n      })\n     setMovies(transformedMovies) ;\n      setIsLoading(false);\n  } catch (error) {\nsetError(error.message);\nsetIsLoading(false);\n\n  }\n}\n\n  return (\n    <React.Fragment>\n      <section>\n        <button onClick={fetchMoviesHandler}>Fetch Movies</button>\n      </section>\n      <section>\n      { !isLoading &&  movies.length >0 && <MoviesList movies={movies} />}\n      { isLoading &&  <p>Loading...*.*.*</p>}\n      {!isLoading && movies.length ===0 && <p>Found no Movies</p>}\n      {!isLoading && error && <p>{error}</p>}\n      </section>\n    </React.Fragment>\n  );\n}\n\nexport default ApiApp;\n "]},"metadata":{},"sourceType":"module"}