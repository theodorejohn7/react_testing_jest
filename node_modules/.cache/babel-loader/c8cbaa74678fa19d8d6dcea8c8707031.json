{"ast":null,"code":"var _jsxFileName = \"/home/dell/Desktop/Theo/REACT JS/router-app/src/components/DataFetching.js\";\nimport React, { useReducer, useEffect } from \"react\";\nimport MoviesList from \"./MoviesList\";\nimport \"./ApiApp.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  movies: [],\n  isLoading: false,\n  error: null,\n  post: {},\n  final: nul\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"FETCH_SUCCESS\":\n      return {\n        loading: false,\n        movies: data.results.map(movieData => {\n          return {\n            id: movieData.episode_id,\n            title: movieData.title,\n            openingText: movieData.opening_crawl,\n            releaseDate: movieData.release_date\n          };\n        })\n      };\n  }\n};\n\nfunction ApiApp() {\n  //   const [movies, setMovies] = useState([]);\n  //   const [isLoading, setIsLoading] = useState(false);\n  //   const [error, setError] = useState(null);\n  //   const [final, setFinal] = useState(null);\n  async function fetchMoviesHandler() {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch(\"https://swapi.dev/api/films/\");\n\n      if (!response.ok) {\n        throw new Error(\"Something went unplanned!!!\");\n      }\n\n      const data = await response.json(); //   const transformedMovies = data.results.map((movieData) => {\n      //     return {\n      //       id: movieData.episode_id,\n      //       title: movieData.title,\n      //       openingText: movieData.opening_crawl,\n      //       releaseDate: movieData.release_date,\n      //     };\n      //   });\n      //   setMovies(transformedMovies);\n      //   setIsLoading(false);\n    } catch (error) {\n      setError(error.message);\n    } finally {\n      setFinal(\"Finally we are here\");\n      setIsLoading(false);\n    } // setIsLoading(false);\n\n  }\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: fetchMoviesHandler,\n        children: \"Fetch Movies\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: [!isLoading && movies.length > 0 && /*#__PURE__*/_jsxDEV(MoviesList, {\n        movies: movies\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 45\n      }, this), isLoading && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading...*.*.*\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 23\n      }, this), !isLoading && movies.length === 0 && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Found no Movies\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 47\n      }, this), !isLoading && error && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 33\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: final\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n}\n\n_c = ApiApp;\nexport default ApiApp;\n\nvar _c;\n\n$RefreshReg$(_c, \"ApiApp\");","map":{"version":3,"sources":["/home/dell/Desktop/Theo/REACT JS/router-app/src/components/DataFetching.js"],"names":["React","useReducer","useEffect","MoviesList","initialState","movies","isLoading","error","post","final","nul","reducer","state","action","type","loading","data","results","map","movieData","id","episode_id","title","openingText","opening_crawl","releaseDate","release_date","ApiApp","fetchMoviesHandler","setIsLoading","setError","response","fetch","ok","Error","json","message","setFinal","length"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,QAA6C,OAA7C;AAEA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAO,cAAP;;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,MAAM,EAAC,EADU;AAEjBC,EAAAA,SAAS,EAAC,KAFO;AAGjBC,EAAAA,KAAK,EAAC,IAHW;AAIjBC,EAAAA,IAAI,EAAC,EAJY;AAKjBC,EAAAA,KAAK,EAACC;AALW,CAArB;;AASA,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC/B,UAAOA,MAAM,CAACC,IAAd;AACI,SAAK,eAAL;AACI,aAAO;AACCC,QAAAA,OAAO,EAAG,KADX;AAEJV,QAAAA,MAAM,EAAGW,IAAI,CAACC,OAAL,CAAaC,GAAb,CAAkBC,SAAD,IAAe;AACpC,iBAAO;AACLC,YAAAA,EAAE,EAAED,SAAS,CAACE,UADT;AAELC,YAAAA,KAAK,EAAEH,SAAS,CAACG,KAFZ;AAGLC,YAAAA,WAAW,EAAEJ,SAAS,CAACK,aAHlB;AAILC,YAAAA,WAAW,EAAEN,SAAS,CAACO;AAJlB,WAAP;AAMD,SAPK;AAFL,OAAP;AAFR;AAeH,CAhBD;;AAoBA,SAASC,MAAT,GAAkB;AAClB;AACA;AACA;AACA;AAEE,iBAAeC,kBAAf,GAAoC;AAClCC,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAC,IAAAA,QAAQ,CAAC,IAAD,CAAR;;AAEA,QAAI;AACF,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAAD,CAA5B;;AAEA,UAAI,CAACD,QAAQ,CAACE,EAAd,EAAkB;AAChB,cAAM,IAAIC,KAAJ,CAAU,6BAAV,CAAN;AACD;;AAED,YAAMlB,IAAI,GAAG,MAAMe,QAAQ,CAACI,IAAT,EAAnB,CAPE,CASJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,KAnBD,CAmBE,OAAO5B,KAAP,EAAc;AACduB,MAAAA,QAAQ,CAACvB,KAAK,CAAC6B,OAAP,CAAR;AACD,KArBD,SAqBU;AACRC,MAAAA,QAAQ,CAAC,qBAAD,CAAR;AACAR,MAAAA,YAAY,CAAC,KAAD,CAAZ;AAED,KA7BiC,CA8BlC;;AACD;;AAED,sBACE,QAAC,KAAD,CAAO,QAAP;AAAA,4BACE;AAAA,6BACE;AAAQ,QAAA,OAAO,EAAED,kBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eAIE;AAAA,iBACG,CAACtB,SAAD,IAAcD,MAAM,CAACiC,MAAP,GAAgB,CAA9B,iBAAmC,QAAC,UAAD;AAAY,QAAA,MAAM,EAAEjC;AAApB;AAAA;AAAA;AAAA;AAAA,cADtC,EAEGC,SAAS,iBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFhB,EAGG,CAACA,SAAD,IAAcD,MAAM,CAACiC,MAAP,KAAkB,CAAhC,iBAAqC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHxC,EAIG,CAAChC,SAAD,IAAcC,KAAd,iBAAuB;AAAA,kBAAIA;AAAJ;AAAA;AAAA;AAAA;AAAA,cAJ1B,eAKI;AAAA,kBAAIE;AAAJ;AAAA;AAAA;AAAA;AAAA,cALJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAeD;;KAtDQkB,M;AAwDT,eAAeA,MAAf","sourcesContent":["import React, { useReducer, useEffect } from \"react\";\n\nimport MoviesList from \"./MoviesList\";\nimport \"./ApiApp.css\";\n\nconst initialState = {\n    movies:[],\n    isLoading:false,\n    error:null,\n    post:{},\n    final:nul\n}\n\n\nconst reducer = (state, action) => {\n    switch(action.type){\n        case \"FETCH_SUCCESS\":\n            return {\n                    loading : false,\n               movies : data.results.map((movieData) => {\n                    return {\n                      id: movieData.episode_id,\n                      title: movieData.title,\n                      openingText: movieData.opening_crawl,\n                      releaseDate: movieData.release_date,\n                    };\n                  })\n\n            }\n    }\n}\n\n\n\nfunction ApiApp() {\n//   const [movies, setMovies] = useState([]);\n//   const [isLoading, setIsLoading] = useState(false);\n//   const [error, setError] = useState(null);\n//   const [final, setFinal] = useState(null);\n\n  async function fetchMoviesHandler() {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch(\"https://swapi.dev/api/films/\");\n\n      if (!response.ok) {\n        throw new Error(\"Something went unplanned!!!\");\n      }\n\n      const data = await response.json();\n\n    //   const transformedMovies = data.results.map((movieData) => {\n    //     return {\n    //       id: movieData.episode_id,\n    //       title: movieData.title,\n    //       openingText: movieData.opening_crawl,\n    //       releaseDate: movieData.release_date,\n    //     };\n    //   });\n    //   setMovies(transformedMovies);\n    //   setIsLoading(false);\n    } catch (error) {\n      setError(error.message);\n    } finally {\n      setFinal(\"Finally we are here\");\n      setIsLoading(false);\n\n    }\n    // setIsLoading(false);\n  }\n\n  return (\n    <React.Fragment>\n      <section>\n        <button onClick={fetchMoviesHandler}>Fetch Movies</button>\n      </section>\n      <section>\n        {!isLoading && movies.length > 0 && <MoviesList movies={movies} />}\n        {isLoading && <p>Loading...*.*.*</p>}\n        {!isLoading && movies.length === 0 && <p>Found no Movies</p>}\n        {!isLoading && error && <p>{error}</p>}\n        { <p>{final}</p>}\n\n      </section>\n    </React.Fragment>\n  );\n}\n\nexport default ApiApp;\n"]},"metadata":{},"sourceType":"module"}